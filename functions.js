import Markup from 'telegraf/markup.js'
import { DispMainMenu, yesNoKeyboard, workerconfirmed } from './keyboards.js'
import { get_alldata } from './db.js'
import { bot } from './app.js'
import { drivers, disp } from './controllers/drivers.js'
import { updatework } from './controllers/update.js'
import fs from 'fs'
import mysql from "mysql2";
import { poolsql } from './config.js'

//import { get } from 'https'
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
export function worktotelegram(allwork, ctx) {
	try {
		let status;
		for (let i = 0; i < allwork.length; i++) {
			if (allwork[i].approved_by_driver == 0) { status = "–ù–µ –ø—Ä–∏–Ω—è—Ç–∞" }
			if (allwork[i].approved_by_driver == 1) { status = "–ü—Ä–∏–Ω—è—Ç–æ" }

			ctx.replyWithHTML(
				`<b>ID:` + allwork[i].id + ` ` + status +
				`</b>\n` + allwork[i].driver_name +
				` ` + allwork[i].time + ` ` +
				` ` + allwork[i].height + ` ` +
				` ` + allwork[i].address + ` ` +
				` ` + allwork[i].phone + ` ` +
				` ` + allwork[i].phone_name + ` ` +
				` ` + allwork[i].manager_name + ` ` +
				` ` + allwork[i].payment_type + ` ` +
				` ` + allwork[i].payment_value + ` ` +
				` ` + allwork[i].firm + ` ` +
				`–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ ` + allwork[i].pererabotka + ` ` +
				` ` + allwork[i].work_date.toISOString().split('T')[0]
				, Markup.inlineKeyboard([
					Markup.callbackButton('–£–¥–∞–ª–∏—Ç—å ' + allwork[i].id, 'del ' + allwork[i].id),
					Markup.callbackButton('–ò–∑–º–µ–Ω–∏—Ç—å ' + allwork[i].id, 'changework ' + allwork[i].id),
				], { columns: 2 }).extra());
		}
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 1', err);
	}
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫—Ä–∞—Ç–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
export function shorttotelegram(allwork, ctx) {
	try {
		let b = new Array()
		if (allwork == "") { ctx.reply("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞–±–æ—Ç –≤ –±–∞–∑–µ –Ω–µ—Ç"); }
		else {
			for (let i = 0; i < allwork.length; i++) {
				b[i] =
					allwork[i].time + " " +
					allwork[i].driver_name + " " +
					allwork[i].height + " " +
					allwork[i].payment_type + " " +
					allwork[i].firm
			}
			b = b.join('\n');
			ctx.replyWithHTML(b);
		}
	}

	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 2', err);
	}
}


export function confirmerwork(job, ctx) {
	try {
		var $id
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–≤—ã–π ID –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –∞ –æ–±–Ω–æ–≤–∏—Ç—å
		var myArray = /^ID/.exec(job[0]);
		if (myArray) {
			$id = job[0].replace(/[^0-9]/g, "")
			job.splice(0, 1)
		}

		if (job.length == 10) { job.push(setDate(1)) }
		if (job.length == 11) {
			let jobdriver
			drivers.forEach(function (entry) {
				if (job[0] == entry[0]) {
					jobdriver = entry[0];
				}
			})
			if (jobdriver) {
				console.log("–í–æ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
				///// –í–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç, –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–∞–π–ª–µ
				var metrRe = /\d\d[–¥–º—Ç–≤–∫–≥]$/; // –†–µ–≥ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∞–∂–Ω–æ—Å—Ç–∏
				var height_ver = metrRe.test(job[1]);
				if (!height_ver) { ctx.reply('–ú–µ—Ç—Ä–∞–∂ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ') }
				else {
					/// –ú–µ—Ç—Ä–∞–∂ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - 2 —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤–∞
					console.log("–ú–µ—Ç—Ä–∞–∂ –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ")
					var timeRe = /^[0-9][0-9]\:[0-9][0-9]$|\—É\—Ç\—á/; /// –†–µ–≥ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ 00:00 –∏–ª–∏ —É—Ç—á
					var time_ver = timeRe.test(job[2]);
					if (!time_ver) { ctx.reply('–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ö—Ö:—Ö—Ö –∏–ª–∏ —É—Ç—á') }
					else {/// –í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
						console.log("–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –≤–µ—Ä–Ω–æ")
						var telRe = /\8[0-9]{10}/; /// –†–µ–≥ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
						var tel_ver = telRe.test(job[4]);
						if (tel_ver && (job[4].length == 11)) {
							/// –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 8
							console.log("–¢–µ–ª–µ—Ñ–æ–Ω –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ")
							// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–≤–µ–¥–µ–Ω –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
							let jobdisp
							disp.forEach(function (entry) {
								if (job[6] == entry[0]) {
									jobdisp = entry[0];
								}
							})
							if (jobdisp) {
								// –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
								console.log("–î–∏—Å–ø–µ—Ç—á–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
								// –°–º–æ—Ç—Ä–∏–º –∫–∞–∫ –≤–≤–µ–¥–µ–Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞
								if (job[7] == '–µ—Å—Ç—å' || job[7] == '–Ω–µ—Ç' || job[7] == '—É—Ç—á') {
									console.log("–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
									if (job[8].substring(0, 3) == '–Ω–∞–ª' || job[8] == '–±–Ω' || job[8].substring(0, 5) == '–∑–∞–ª–æ–≥') {
										console.log("–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")

										/// –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞—Ç–∞ (–∞ –æ–Ω –¥–∞—Ç–∞, —Ç.–∫. –º—ã —Å–∞–º–∏ –µ–≥–æ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–ª–∏) - —Ç–æ –¥–∞–ª—å—à–µ
										if (/^202[34]\-[0-9][0-9]\-[0-9][0-9]$/.test(job[10])) {
											/// –í–æ—Ç –æ—Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ , –µ—Å–ª–∏ ID –Ω–µ—Ç —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É

											if (!$id) { replyconfirmed(job, ctx) }
											else { updatework(job, $id, ctx); $id = '' }
										}
										else {
											ctx.reply('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –¥–∞—Ç–æ–π? –ö–∞–∫ —Ç—ã —É–º—É–¥—Ä–∏–ª—Å—è?!?!')
										}

									}
									else { ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã (–Ω–∞–ª*—Å—É–º–º–∞*, –±–Ω, –∑–∞–ª–æ–≥*—Å—É–º–º–∞*)') }
								}
								else { ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É (–µ—Å—Ç—å, –Ω–µ—Ç, —É—Ç—á)') }
							}
							else { ctx.reply('–î–∏—Å–ø–µ—Ç—á–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ') }
						}
						else { ctx.reply('–¢–µ–ª–µ—Ñ–æ–Ω –≤–≤–µ–¥–µ–Ω –Ω–µ —Ñ–æ—Ä–º–∞—Ç–µ 8—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö') }
					}
				}
			}
			else { ctx.reply('–ò–º—è –≤–æ–¥–∏—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ') }
		}
		else {
			ctx.replyWithHTML(
				`–ß—Ç–æ-—Ç–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 11 –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–π–¥—É—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é\n` +
				`<i>–î–æ–±–∞–≤—å—Ç–µ —Ä–∞–±–æ—Ç—ã –ø–æ —à–∞–±–ª–æ–Ω—É</i>\n` +
				`1 –í–æ–¥–∏—Ç–µ–ª—å (—Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏),\n 2 –ú–µ—Ç—Ä–∞–∂( –¥–≤–µ —Ü–∏—Ñ—Ä—ã + –±—É–∫–≤–∞ (—Ç,–∫,–≤,–±),\n 3 –í—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç —Ö—Ö:—Ö—Ö),\n 4 –ê–¥—Ä–µ—Å (–ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–æ –Ω–µ —Å—Ç–∞–≤—å—Ç–µ –∑–∞–ø—è—Ç—ã–µ!),\n 5 –¢–µ–ª–µ—Ñ–æ–Ω (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏ –¥–∞–ª–µ–µ +10 —Ü–∏—Ñ—Ä),\n 6 –ö–æ–Ω—Ç–∞–∫—Ç (–ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ), \n 7 –î–∏—Å–ø–µ—Ç—á–µ—Ä (—Ç–æ–ª—å–∫–æ –Ω–∞—à–∏),\n 8 –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ (–µ—Å—Ç—å, –Ω–µ—Ç, —É—Ç—á) ,\n 9 –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã (–±–Ω, –Ω–∞–ª—Å—É–º–º–∞,–∑–∞–ª–æ–≥—Å—É–º–º–∞)\n 10 –§–∏—Ä–º–∞ (–ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)\n 11 –î–∞—Ç–∞ (–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å, —Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞–≤—Ç—Ä–∞)`
				, DispMainMenu())
		}
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 3', err);
	}
}


export function replyconfirmed(job, ctx) {
	try {
		ctx.replyWithHTML(
			`&#128165;<b>–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é</b>&#128165;\n\n<b>–í—Å–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–µ—Ä–Ω–æ?</b>\n---------------\n` +
			`<i>&#128053;  –í–æ–¥–∏—Ç–µ–ª—å</i>:     ` + job[0] +
			`\n<i>&#128129;  –ú–µ—Ç—Ä–∞–∂</i>:     ` + job[1] +
			`\n<i>&#128347;  –í—Ä–µ–º—è</i>:     ` + job[2] +
			`\n<i>&#128205;  –ê–¥—Ä–µ—Å</i>:     ` + job[3] +
			`\n<i>&#9742;  –¢–µ–ª–µ—Ñ–æ–Ω</i>:     ` + job[4] +
			`\n<i>&#128119;  –ö–æ–Ω—Ç–∞–∫—Ç (–ò–º—è)</i>:     ` + job[5] +
			`\n<i>&#128511;  –î–∏—Å–ø–µ—Ç—á–µ—Ä</i>:     ` + job[6] +
			`\n<i>&#9654;  –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞</i>:     ` + job[7] +
			`\n<i>&#128178;  –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã</i>:     ` + job[8] +
			`\n<i>üíº  –§–∏—Ä–º–∞</i>:     ` + job[9] +
			`\n<i>‚è±  –î–∞—Ç–∞</i>:     ` + job[10] + `\n ---------------`, yesNoKeyboard()
		)
		ctx.session.work = ctx.message.text + ',' + job[10]
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 4', err);
	}
}


export function setDate(x) {
	try {
		var date = new Date();
		date.setDate(date.getDate() + x);
		date = date.toISOString().split('T')[0]
		return date;
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 5', err);
	}
}


// –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏—Ç–∏—è –Ω–∞ –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
export function mestojob(ctx) {
	try {
		let job = ctx.message.text.split(',')
		job.forEach(function (item, i, job) {
			job[i] = item.trim()
		});
		return job;
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 6', err);
	}
}

// –Ø –æ—á–µ–Ω—å –¥–æ–ª–≥–æ –º—É—á–∞–ª—Å—è —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –¥–≤–µ, –Ω–æ –ø–µ—Ä–≤–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
// –∞ –≤—Ç–æ—Ä–æ–µ –∫–æ–≥–¥–∞ –∏–¥–µ—Ç –æ—Ç–≤–µ—Ç –î–ê –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –î–æ–ª–≥–æ –º—É—á–∞–ª—Å—è, –∑–∞–±–∏–ª

export function mestojob2(ctx) {
	try {
		let job = ctx.update.callback_query.message.text.split(',')
		job.forEach(function (item, i, job) {
			job[i] = item.trim()
		});
		return job;
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 7', err);
	}
}



//–ï—Å–ª–∏ —Ä–∞–±–æ—Ç –Ω–µ—Ç—É —Ç–æ –ø–∏—à–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
export function actyalwork(allwork, ctx) {
	try {
		// –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
		if (allwork == "") { ctx.reply("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞–±–æ—Ç –≤ –±–∞–∑–µ –Ω–µ—Ç"); }
		else { worktotelegram(allwork, ctx) }
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 7', err);
	}
}

export function driverwork(allwork, ctx) {
	try {
		if (allwork == "") { ctx.reply("–î–ª—è –í–∞—Å –ø–æ–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç –Ω–µ—Ç—É"); }
		else {

			allwork.forEach(function (job) {
				if (job.payment_value == 0) { job.payment_value = '' }
				job.work_date = job.work_date.toISOString().split('T')[0]
				if (job.work_date == setDate(0)) { job.work_date = '–°–µ–≥–æ–¥–Ω—è' }
				if (job.work_date == setDate(1)) { job.work_date = '–ó–∞–≤—Ç—Ä–∞' }

				let telformat = "+7" + String(job.phone).slice(1)
				var vivod =
					"<b>" + job.work_date + " –í—Ä–µ–º—è:  " + job.time + " </b>" +
					"\n----------------------------------------------\n" +
					"<i>&#128129;  –ú–µ—Ç—Ä–∞–∂</i>:      " + job.height +
					"\n<i>&#128129;  –ê–¥—Ä–µ—Å</i>:      " + job.address +
					"\n<i>&#128129;  –û–ø–ª–∞—Ç–∞</i>:      " + job.payment_type + ' ' + job.payment_value +
					"\n<i>&#128129;  –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞</i>:      " + job.pererabotka +
					"\n<i>&#128129;  –û—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π</i>:      " + job.manager_name +

					"\n<i>&#128129;  –¢–µ–ª–µ—Ñ–æ–Ω</i>:" + telformat + ` ` + job.phone_name


				if (job.approved_by_driver == 0) {
					worknotconf(job, ctx, vivod);
				}
				if (job.approved_by_driver == 1) {
					workconf(job, ctx, vivod);
				}

			})
		}
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 8', err);
	}
}

function worknotconf(job, ctx, vivod) {
	try {
		ctx.replyWithHTML(
			`<b>&#10071;&#10071;&#10071;–†–ê–ë–û–¢–ê –ù–ï –ü–†–ò–ù–Ø–¢–ê&#10071;&#10071;&#10071;</b>\n\n` +
			vivod,
			Markup.inlineKeyboard([
				Markup.callbackButton('–ü—Ä–∏–Ω—è—Ç–æ', 'approve' + job.id)
			], { columns: 1 }).extra());
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 9', err);
	}
}

function workconf(job, ctx, vivod) {
	try {
		ctx.replyWithHTML(
			`<b>–†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞</b>\n` +
			vivod,
			workerconfirmed(job.id)
		);
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 11', err);
	}
}


export function newnonconfirm(driverid, [manager_id, driver_name]) {
	try {
		//–¢—É—Ç –≤ else –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º , —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –Ω–µ—Ç
		if (driverid !== 0) {
			bot.telegram.sendMessage(driverid, '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞!');
		}
		else {
			bot.telegram.sendMessage(manager_id, '–í–æ–¥–∏—Ç–µ–ª—é ' + driver_name + ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞, –Ω–æ –µ–≥–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –Ω–µ—Ç! –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
		}
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 10', err);
	}

}




export function sliceryear(str) {
	try {
		str = str.slice(5);
		return str
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 12', err);
	}
}


export async function listDir(ctx, path) {
	try {
		try {
			return await fs.promises.readdir(path);
		} catch (err) {
			ctx.reply("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å");
			return 2
		}
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 13', err);
	}
}

// –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 00:00
export function nowtimexxxx() {
	try {
		var h = new Date();
		var c = h.getHours().toString()
		var d = h.getMinutes().toString()
		if (c.length == 1) { c = "0" + c }
		if (d.length == 1) { d = "0" + d }
		return (c + ":" + d);
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 14', err);
	}
}

export function MakeMeSmile(ctx) {
	listDir(ctx, './smile/').then((value) => {
		console.log(value.length)
		let i = Math.floor(Math.random() * value.length);
		ctx.replyWithAudio({ source: './smile/' + value[i] });
	})
}


// –î–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–≤–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –•–•:–•–• –∏ –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å—Ç–∞—Ä–∞—è - —Ç–æ –∑–∞—è–≤–∫—É —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —É –≤–æ–¥–∏—Ç–µ–ª—è 
export function changeApprove(a, b) {
	try {
		if (a != '—É—Ç—á') {
			if (b < setDate(0)) { return 1 }
			if (b > setDate(0)) { return 0 }
			if (b == setDate(0)) {
				if (nowtimexxxx() >= a) { return 1 }
				if (nowtimexxxx() < a) { return 0 }
			}
		}
		else {
			return 0
		}
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 15', err);
	}
}


//–§—É–Ω–∫—Ü–∏—è –∑–∞–µ–±—ã–≤–∞–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏. 
export async function zaebzayavka(ctx, bot, zaebtime) {
	try {
		get_alldata("SELECT * FROM work WHERE driver_id_tel = " + ctx.update.message.from.id + " AND approved_by_driver = 0", (result) => {
			if (result.length > 0) {
				console.log("–ï—Å—Ç—å –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞")
				var d = bot.telegram.sendMessage(ctx.update.message.from.id, '‚ùó‚ùó‚ùó–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞‚ùó‚ùó‚ùó');
				d.then((value) => {
					setTimeout(deleter, zaebtime, value.chat.id, value.message_id, bot);
				})
			}
			else {
				console.log("–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")
			}
		})
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 16', err);
	}
}

async function deleter(a, b, bot) {
	try {
		bot.telegram.deleteMessage(a, b)
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 17', err);
	}
}

export function showstatus(ctx, date, whom) {
	try {
		// whom - —á—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å . 10 -–≤—Å—é –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ—É

		get_alldata("SELECT * FROM bort_by_day WHERE date  LIKE '" + date + "%' LIMIT 1", function (result) {
			var unind = []; // —Å—Ç–∞—Ç—É—Å 0
			var dontwork = []; // —Å—Ç–∞—Ç—É—Å 1
			var senden = []; // —Å—Ç–∞—Ç—É—Å 2
			var accepted = []; // —Å—Ç–∞—Ç—É—Å 3
			var worked = []; // —Å—Ç–∞—Ç—É—Å 4
			var undriver = []; // —Å—Ç–∞—Ç—É—Å 5
			var remont = [];  // —Å—Ç–∞—Ç—É—Å 6


			result = result[0]
			for (var key in result) {
				if (result[key] == 0) { unind = unind + key + ' ,' }
				if (result[key] == 1) { dontwork = dontwork + key + ' ,' }
				if (result[key] == 2) { senden = senden + key + ' ,' }
				if (result[key] == 3) { accepted = accepted + key + ' ,' }
				if (result[key] == 4) { worked = worked + key + ' ,' }
				if (result[key] == 5) { undriver = undriver + key + ' ,' }
				if (result[key] == 6) { remont = remont + key + ' ,' }

			}


			if (whom == 1 && dontwork.length > 1) { ctx.reply("–ö—É—Ä—è—â–∏–µ: " + dontwork) }
			if (whom == 2 && senden.length > 1) { ctx.reply("–ù–µ –ø—Ä–∏–Ω—è–ª–∏ " + senden) }
			if (whom == 2 && senden.length < 1) { ctx.reply("–í—Å–µ –ø—Ä–∏–Ω—è–ª–∏") }
			if (whom == 3 && accepted.length > 1) { ctx.reply("–ë–æ—Ä—Ç–∞ —Å –ø—Ä–∏–Ω—è—Ç–æ–π –∑–∞—è–≤–∫–æ–π: " + accepted) }
			if (whom == 4 && worked.length > 1) { ctx.reply("–û—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –±–æ—Ä—Ç–∞: " + worked) }
			if (whom == 5 && undriver.length > 1) { ctx.reply("–ë–æ—Ä—Ç–∞ –±–µ–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–π: " + undriver) }
			if (whom == 5 && undriver.length < 1) { ctx.reply("–ë–µ–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–π –±–æ—Ä—Ç–æ–≤ –Ω–µ—Ç") }
			if (whom == 6 && remont.length > 1) { ctx.reply("–ë–æ—Ä—Ç–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µ: " + remont) }
			if (whom == 6 && remont.length < 1) { ctx.reply("–ú–∞—à–∏–Ω –Ω–∞ —Ä–µ–º–æ–Ω—Ç–µ –Ω–µ—Ç") }

			if (whom == 10) {
				ctx.replyWithHTML(
					'<b>–î–∞—Ç–∞ ' + date +
					'\n\n–ö—É—Ä—è—Ç:   </b>' + dontwork +
					'\n<b>–ù–µ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É:   </b>' + senden +
					'\n<b>–ü—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É:   </b>' + accepted +
					'\n<b>–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ   </b>' + worked +
					'\n<b>–ë–µ–∑ –≤–æ–¥–∏—Ç–µ–ª–µ–π:   </b>' + undriver +
					'\n<b>–†–µ–º–æ–Ω—Ç:   </b>' + remont
				)
			}
		})

	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 18', err);
	}
}

export function bort_to_date(date) {
	try {
		get_alldata("SELECT bort_number, status, change_date FROM borts", function (result) {

			for (var key in result) {
				/// –¢–£–¢ –ú–ï–ù–Ø–õ
				if (result[key].change_date.toISOString().split('T')[0] == setDate(0)) {
					get_alldata("UPDATE bort_by_day SET `" + result[key].bort_number + "`=" + result[key].status + " WHERE date  LIKE '" + date + "%'", function (update) { })
				}
				else {
					console.log("–ù–ï –ò–∑–º–µ–Ω–µ–Ω—ã–π –±–æ—Ä—Ç: " + result[key].bort_number);
					if (result[key].status == 5 || result[key].status == 0 || result[key].status == 6) {

						get_alldata("UPDATE bort_by_day SET `" + result[key].bort_number + "`=" + result[key].status + " WHERE date  LIKE '" + date + "%'", function (update) { })
					}
				}

			}
		})
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 19', err);
	}
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—à–∏–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ —à–∞–±–ª–æ–Ω–µ, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π —Ç–∞–±–ª–∏—Ü—ã
export function newbortstatus(ctx, borts, whom) {
	try {
		var statusb
		if (whom == 1) { statusb = "–≤ —Å—Ç—Ä–æ—é" }
		if (whom == 5) { statusb = "–±–µ–∑ –≤–æ–¥–∏—Ç–µ–ª—è" }
		if (whom == 6) { statusb = "–Ω–µ –≤ —Å—Ç—Ä–æ—é" }


		borts.forEach(function (result) {
			get_alldata("UPDATE borts SET STATUS=" + whom + ", change_date='" + setDate(0) + "' WHERE bort_number=" + result + "", function (update) {
				ctx.reply("–ë–æ—Ä—Ç " + result + " –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å: " + statusb);
			})
		})
		actualizator()
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 19', err);
	}

}


// –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –ø—Ä–∏–Ω—è—Ç–∏—è
export function actualizator() {
	try {
		var status;
		var sql = "SELECT A.work_date, A.time, A.approved_by_disp, A.approved_by_driver, B.driver_name, B.bort_number, B.expired_date  FROM work A INNER JOIN drivers B ON A.driver_name = B.driver_name WHERE A.work_date = '" + setDate(+1) + "'"

		get_alldata(sql, function (result) {
			for (var key in result) {


				if (result[key].work_date.toISOString().split('T')[0] > setDate(0) || (result[key].work_date.toISOString().split('T')[0] == setDate(0) && result[key].time > nowtimexxxx())) {
					if (result[key].approved_by_driver == 0) { status = 2 }
					if (result[key].approved_by_driver == 1) { status = 3 }
					if (result[key].approved_by_disp == 1) { status = 4 }
					get_alldata("UPDATE bort_by_day SET `" + result[key].bort_number + "` = " + status + " WHERE  `date`  LIKE '%" + setDate(+1) + "%'", function () {
					})

				}
				else {
					console.log("–ó–∞—è–≤–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ 13:00 –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
				}
			}

		})
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 20', err);
	}
}


// –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –¥–Ω—è —Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ–≥–æ —Å–æ–∑–¥–∞—Å—Ç
export function createnewday() {
	try {
		get_alldata("SELECT * FROM bort_by_day WHERE date  LIKE '" + setDate(+1) + "%' LIMIT 1", function (result) {
			if (result.length == 0) {
				get_alldata("INSERT INTO bort_by_day (date) VALUES ('" + setDate(+1) + "')", function (result) {
					console.log("–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –¥–µ–Ω—å!");
					actualizator()
				})
			}
		})
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 21', err);
	}
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ (—Å–Ω–∏–∑—É –∫–æ–ø–∏—è –Ω–æ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ )
export function doWhenDelete(diyingwork) {
	console.log(diyingwork)
	try {
		if (diyingwork[0].work_date.toISOString().split('T')[0] > setDate(0) || (diyingwork[0].work_date.toISOString().split('T')[0] == setDate(0) && diyingwork[0].time > nowtimexxxx())) {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—è—Ç–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
			if (diyingwork[0].driver_id_tel !== 0) {
				bot.telegram.sendMessage(diyingwork[0].driver_id_tel, '–ü—Ä–∏–Ω—è—Ç—É—é —Ä–∞–±–æ—Ç—É –ø–æ –∞–¥—Ä–µ—Å—É: ' + diyingwork[0].address + ' —É–¥–∞–ª–∏–ª –¥–∏—Å–ø–µ—Ç—á–µ—Ä. –í–∞–º —Å–æ–æ–±—â–∞—Ç –æ –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è');
				get_alldata("SELECT bort_number FROM drivers WHERE driver_name = '" + diyingwork[0].driver_name + "'", function (result) {
					get_alldata("UPDATE bort_by_day SET `" + result[0].bort_number + "` = 1 WHERE  `date`  LIKE '%" + diyingwork[0].work_date.toISOString().split('T')[0] + "%'", function () {
						console.log("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 1")
						actualizator()
					})

				})
			}

		}


	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 22', err);
	}
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ 1. –ï–µ –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–µ–Ω–∏—Ç—å —Å –≤–µ—Ä—Ö–Ω–µ–π, –Ω–æ –º–Ω–µ –ø–æ–∫–∞ –ª–µ–Ω—å —ç—Ç–æ –¥–µ–ª–∞—Ç—å
export function workchanged(job, id_driver) {
	try {
		if (job[10] > setDate(0) || (job[10] == setDate(0) && job[2] > nowtimexxxx())) {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω—è—Ç–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
			if (id_driver !== 0) {
				bot.telegram.sendMessage(id_driver, '–ü—Ä–∏–Ω—è—Ç—É—é —Ä–∞–±–æ—Ç—É –∏–∑–º–µ–Ω–∏–ª –¥–∏—Å–ø–µ—Ç—á–µ—Ä. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏!');
				get_alldata("SELECT bort_number FROM drivers WHERE driver_name = '" + job[0] + "'", function (result) {
					get_alldata("UPDATE bort_by_day SET `" + result[0].bort_number + "` = 1 WHERE  `date`  LIKE '%" + job[10] + "%'", function () {
						console.log("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 1")
						actualizator()
					})

				})
			}
		}
	}
	catch (err) {
		console.error('–û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ 23', err);
	}
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –¥–æ–ª–∂–Ω–∏–∫–æ–≤
export function dolg(ctx) {

	//–ï—Å–ª–∏ —ç—Ç–æ —è –∏–ª–∏ –ì–µ–≤, —Ç–æ –≤—ã–¥–∞—Ç—å –µ—â–µ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–ª–≥–∞–º
	if (ctx.update.message.from.id == 263367241 || ctx.update.message.from.id == 285512812) {
		var a = 0
		var b = 0
		var k = 0
		var p = 0
		var g = 0
		var f = 0

		get_alldata("SELECT dolg2,manager from kompany WHERE dolg2>0 AND status=0", (result) => {
			result.forEach(function (value) {
				if (value.manager == 'a') { a = a + value.dolg2 }
				if (value.manager == 'b') { b = b + value.dolg2 }
				if (value.manager == 'k') { k = k + value.dolg2 }
				if (value.manager == 'p') { p = p + value.dolg2 }
				if (value.manager == 'g') { g = g + value.dolg2 }
				if (value.manager == 'f') { f = f + value.dolg2 }


			})
			let alldolg = a + b + k + p + g + f;
			a = "–ê—Ä—à–∞–∫: <strong>" + Math.round(a / 1000).toLocaleString('ru') + "</strong> k \t" + Math.round(100 * a / alldolg) + "%";
			b = "–ë–æ—Å—Å:  <strong>" + Math.round(b / 1000).toLocaleString('ru') + "</strong> k \t" + Math.round(100 * b / alldolg) + "%";
			k = "–í–æ–≤–∞:  <strong>" + Math.round(k / 1000).toLocaleString('ru') + "</strong> k \t" + Math.round(100 * k / alldolg) + "%";
			p = "–ö—Ä–∏—Å:  <strong>" + Math.round(p / 1000).toLocaleString('ru') + "</strong> k \t" + Math.round(100 * p / alldolg) + "%";
			g = "–ì–æ—Ä:   <strong>" + Math.round(g / 1000).toLocaleString('ru') + "</strong> k \t" + Math.round(100 * g / alldolg) + "%";
			f = "–§–∞—Ç–∏—Ö: <strong>" + Math.round(f / 1000).toLocaleString('ru') + "</strong> k \t" + Math.round(100 * f / alldolg) + "%";

			ctx.replyWithHTML(`
 –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ–ª–≥–∞ –Ω–∞ \n${setDate(0)}
 <b>${alldolg.toLocaleString('ru')}—Ä</b>
 ------------------------------
 ${f}
 ${b}
 ${g}
 ${a}
 ${k}
 ${p}
 `);


		})
	}


	// –î–∞–ª–µ–µ –≤—ã–¥–∞—Ç—å –∏–Ω—Ñ—É –ø–æ –¥–æ–ª–∂–Ω–∏–∫—É –∏—Å—Ö–æ–¥—è –∏–∑ —Ñ–∞–π–ª–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–∫–≤–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –±—É–∫–≤–µ –≤ –ë–î
	let letter = 0;
	let name
	disp.forEach(function (entry) {
		if (ctx.update.message.from.id == entry[1]) {
			letter = entry[2]
			name = entry[0]
		}
	})
	if (letter !== 0) {
		var massive = '–ú–æ–Ω—Ç–µ ' + setDate(0) + "\n–î–æ–ª–≥–∏ " + name + "\n"
		var razn
		var i
		var slovo
		get_alldata("Select * from kompany WHERE STATUS=0 AND manager='" + letter + "' AND dolg2>0 ORDER BY name", (result) => {
			result.forEach(function (item) {
				razn = item.dolg1 - item.dolg2
				if (razn < 0) { slovo = '‚¨ÜÔ∏è' }
				if (razn > 0) { slovo = '‚¨áÔ∏è' }
				item.name = (item.name).replace('–û–û–û', '');
				item.name = (item.name).replace('–ê–û', '');
				item.name = (item.name).split('(')[0]
				item.name = (item.name).replace('  ', '');
				item.name = (item.name).replace('–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ¬´–ê–ù–¢', '');
				if (item.dolg1 == 0) { razn = '' }
				else { razn = "" + slovo + Math.abs(razn).toLocaleString('ru') }
				massive = massive + (("\n" + item.name + " <b>" + item.dolg2.toLocaleString('ru') + "</b> —Ä  " + razn))
				massive = massive + "\n-----"
				i++
			})
			if (massive.length > 1) { ctx.replyWithHTML(massive); }
		})
	}



}

// –Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç –ø—É–ª —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å((
var pool = mysql.createPool(poolsql).promise()
export function DolgLoader() {

	

	let dolgmas = []
	var i = 0
	let fileContent = fs.readFileSync('./123.txt', 'utf8');
	let result = String(fileContent);
	result = result.replace(/\,[0-9][0-9]/gi, "");
	result = result.replace(/([0-9])(\¬†)([0-9])/gi, "$1$3");
	result = result.replace(/\t/gi, "z");
	result = result.replace(/\n/gi, "end");
	result = result.replace(/\r/gi, "");
	var res = result.split("end");
	var reg = (res.splice(9, res.length - 10));
	reg.forEach(function (result) {
		var rev = result.split("z");
		if (rev[5] == '') { rev[5] = 0 }
		dolgmas[i] = rev[0] + "–¥–æ–ª–≥:" + rev[5]
		i++
	})

	sukablyad(dolgmas,pool)

async function sukablyad(dolgmas,pool){
	dolgmas.forEach(function (inffromfile) {
		var firm = inffromfile.split("–¥–æ–ª–≥:")[0];
		var dolg = inffromfile.split("–¥–æ–ª–≥:")[1];
		pool.execute(`SELECT name,status,d1,d2,dolg1,dolg2 from kompany WHERE name='${firm}' && firm='m' `).then((zbs) => {
			var result=zbs[0]
			//console.log(result);
			if (result.length==1) {
				if (dolg == result[0].dolg2) {
					console.log(`${firm} –î–æ–ª–≥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è `)
				}

				if (dolg != result[0].dolg2) {
					var dateold = (result[0].d2).toISOString().split('T')[0]
					pool.execute(`UPDATE kompany SET dolg1=${result[0].dolg2}, dolg2=${dolg}, d1='${dateold}', d2='${setDate(0)}', status=0 WHERE name='${firm}' && firm='m'`).then(() => { console.log(`${firm} –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ–ª–≥ —Ñ–∏—Ä–º—ã `); })
				}
			}
			//  –í —Ñ–∞–π–ª–µ –µ—Å—Ç—å –¥—É–±–ª–µ–∂ —Ñ–∏—Ä–º –ê–°–¢ –∏ –ú–û–ù–û–õ–ò–¢ –°–¢–†–û–ô - –ø–æ—ç—Ç–æ–º—É —Ç–∞–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
			if(result.length==0)  {
				pool.execute(`INSERT INTO kompany (NAME,d2,dolg2,firm) VALUES ('${firm}','${setDate(0)}',${dolg},'m')`).then(() => { console.log(`${firm} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ–∏—Ä–º–∞ `); })
			}
		})
	})
}
		// 	  pool.query(`SELECT name,status,d1,d2,dolg1,dolg2 from kompany WHERE name='${firm}' && firm='m' `, function (err, result) {

		// if (result.length == 1) {
		// 	var dateold = (result[0].d2).toISOString().split('T')[0]
		// 	if (result.length == 1) {
		// 		if (dolg == result[0].dolg2) {
		// 			console.log(`${firm} –î–æ–ª–≥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è `)
		// 		}

		// 		if (dolg != result[0].dolg2) {
		// 			 pool.query(`UPDATE kompany SET dolg1=${result[0].dolg2}, dolg2=${dolg}, d1='${dateold}', d2='${setDate(0)}', status=0 WHERE name='${firm}' && firm='m'`, function (err, result) {
		// 				console.log(`${firm} –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ–ª–≥ —Ñ–∏—Ä–º—ã `);
		// 			})
		// 		}
		// 	}

		// }
		// if (result.length == 0) {
		// 	pool.query(`INSERT INTO kompany (NAME,d2,dolg2,firm) VALUES ('${firm}','${setDate(0)}',${dolg},'m')`, function (err, result) {
		// 		console.log(`${firm} –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ–∏—Ä–º–∞`);
		// 	})
		// }
		// })



}
